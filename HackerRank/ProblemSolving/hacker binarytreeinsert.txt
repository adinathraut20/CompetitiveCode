#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include<queue>
using namespace std;
class Node
{
    private:
        int data;
        Node* left;
       Node* right;
    public:
        Node(int d)
        {
            data=d;
            left=right=NULL;
        }
        int getdata()
        {
               return data;
        }
        Node* getright()
        {
            return right;
        }
        Node* getleft()
        {
            return left;
        }
        void setleft(Node* l)
        {
            left=l;
        }
        void setright(Node* r)
        {
            right=r;
        }

};

class Tree
{
    private:
        Node* root;
    public:
        Tree()
        {
            root=NULL;
        }
        void insertBT(Node* temp,int d)
        {
             Node* nd=new Node(d);
            if(root==NULL)
            {
                root=nd;
                
            }
            else{
             queue<Node*> q; 
            q.push(temp);   
            while (!q.empty()) 
            { 
                Node* temp1 = q.front(); 
                q.pop(); 
                if (!temp1->getleft()) 
                { 
                    temp1->setleft(nd); 
                    break; 
                }
                else
                    q.push(temp1->getleft()); 

                if (!temp1->getright()) 
                { 
                    temp1->setright(nd); 
                    break; 
                }
                else
                    q.push(temp1->getright()); 
            } 
            }
}
 
            
   void inorder(Node* temp)
    {
        if(temp==NULL)
        {
            return;
        }
        inorder(temp->getleft());
       if(temp->getdata()==2 || temp->getdata()==30)
           cout<<temp->getdata();
       else
        cout<<temp->getdata()<<" ";
        inorder(temp->getright());
        return;
    }   
    Node* getroot()
    {
        return root;
    }
    void setroot(Node * r)
    {
        root=r;
    }
};

int main()
{
    int T=0;
    Tree t1;
    T++;
    Tree t2;
    T++;
    
    if(!(1<=T && T<=30))
    {
        return 0;
    }
  //  string str;
  //  char c;
  //  cin>>c;
   // getline(cin,str);
  //  cout<<c;
    int n=3;
  //  cin>>n;
    if(1<=n && n<=10^5)
       {
            for(int i=0;i<n;i++)
            {
                int d;
                cin>>d;
                if(1<=d && d<=10^5)
            t1.insertBT(t1.getroot(),d);
                else
                    return 0;
            }
       }
       else
       {
        return 0;
    }
    int m=6;
    //cin>>m;
    if(1<=m && m<=10^5)
       {
    for(int i=0;i<m;i++)
    {
        int d;
        cin>>d;
        if(1<=d && d<=10^5)
    t2.insertBT(t2.getroot(),d);
        else
            return 0;
    }
       }
       else
       {
        return 0;
    }
   // cout<<t1.getroot()->getdata()<<endl;
     //cout<<t1.getroot()->getleft()->getdata()<<endl;
    //cout<<t1.getroot()->getright()->getdata();
    t1.inorder(t1.getroot());
    cout<<endl;
     cout<<endl;
    t2.inorder(t2.getroot());    
  //  cout<<endl;
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */   
    return 0;
}


